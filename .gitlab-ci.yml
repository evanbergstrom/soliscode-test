# .gitlab-ci.yml
stages:
  - build
  - test
  - release
  - publish
  - site

variables:
  SITE_DIR: "target/staging"

default:
  image: maven:3.9.9-eclipse-temurin-23
  cache:
    key: maven-repo
    paths:
      - .m2/repository
  before_script:
    - java -version
    - mvn -v

# ---------- Build (no tests) ----------
build:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH'
      when: on_success
    - when: never
  script:
    - mvn -B -q -DskipTests package
  artifacts:
    when: always
    paths:
      - target/*.jar
      - target/*.pom
    expire_in: 1 week

# ---------- Test (upload reports on failure) ----------
test:
  stage: test
  needs: [ "build" ]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH'
      when: on_success
    - when: never
  script:
    - mvn -B -q verify
  artifacts:
    when: always
    reports:
      junit: target/surefire-reports/*.xml
    expire_in: 1 week

  # -----------------------------
  # Manual Release (semantic-release)
  # - Computes version, updates changelog, tags, creates GitLab Release
  # - Uses a dedicated job that you trigger manually
  # - Cannot use "release" keyword. GitLAb release keyword schema requires 'description' and 'tag_name' properties
  #   and those will be provided by semantic release.
  # -----------------------------
semantic_release:
  stage: release
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
    - when: never
  variables:
    GIT_DEPTH: "0"         # semantic-release needs full history/tags
    SERVER_USERNAME: "$CENTRAL_USERNAME"
    SERVER_PASSWORD: "$CENTRAL_PASSWORD"
    GPG_PRIVATE_KEY: "$GPG_PRIVATE_KEY_ARMOR"
    GPG_PASSPHRASE: "$GPG_PASSPHRASE"
  cache: {}
  before_script:
    # Git identity for release commits (fallbacks if not provided by GitLab)
    - git config --global user.email "${GITLAB_USER_EMAIL:-ci@users.noreply.gitlab.com}"
    - git config --global user.name  "${GITLAB_USER_NAME:-gitlab-ci}"
    # Install Node 22.x (required by semantic-release v24+)
    - apt-get update && apt-get install -y curl ca-certificates gnupg
    - curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
    - apt-get install -y nodejs
    - node -v && npm -v
    # Install semantic-release + plugins (plugin list matches .releaserc.json)
    - npm i -g semantic-release semantic-release-maven @semantic-release/gitlab @semantic-release/git @semantic-release/changelog @semantic-release/exec
    # Import GPG so the publish step can sign
    - |
      if [ -n "$GPG_PRIVATE_KEY_ARMOR" ]; then
        echo "$GPG_PRIVATE_KEY_ARMOR" | base64 -d > /tmp/private.key
        gpg --batch --import /tmp/private.key || true
        mkdir -p ~/.gnupg
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        export GPG_TTY=$(tty) || true
      fi
    # Write a minimal settings.xml for Central (used by the publish step)
    - |
      cat > /tmp/settings.xml <<EOF
      <settings xmlns="https://maven.apache.org/SETTINGS/1.2.0">
        <servers>
          <server>
            <id>central</id>
            <username>${CENTRAL_USERNAME}</username>
            <password>${CENTRAL_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
    - export MAVEN_SETTINGS=/tmp/settings.xml
  script:
    # semantic-release will:
    #  - analyze commits (Conventional Commits)
    #  - update CHANGELOG.md and pom.xml (via maven-semantic-release)
    #  - commit, tag, and create a GitLab Release
    #  - (plugin can also bump to the next -SNAPSHOT)
    - semantic-release
  dependencies: [ ]
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - CHANGELOG.md


# -----------------------------
# Publish the tagged release to Central
# - Checks out the tag created by semantic-release and deploys it
# - This job should run only on tag pipelines (created by semantic-release)
# -----------------------------
publish:release:
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: on_success
    - when: never
  before_script:
    - |
      if [ -n "$GPG_PRIVATE_KEY_ARMOR" ]; then
        echo "$GPG_PRIVATE_KEY_ARMOR" | base64 -d > /tmp/private.key
        gpg --batch --import /tmp/private.key || true
        mkdir -p ~/.gnupg
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        export GPG_TTY=$(tty) || true
      fi
    - |
      cat > /tmp/settings.xml <<EOF
      <settings xmlns="https://maven.apache.org/SETTINGS/1.2.0">
        <servers>
          <server>
            <id>central</id>
            <username>${CENTRAL_USERNAME}</username>
            <password>${CENTRAL_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
  script:
    - |
      echo "Deploying release at tag: $CI_COMMIT_TAG"
      mvn -B -q -s /tmp/settings.xml -Dgpg.passphrase="$GPG_PASSPHRASE" -DskipTests deploy
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - target/*

# -----------------------------
# Snapshot publishing on every push to main
# - Uses the Central Publishing Maven Plugin to deploy snapshots
# -----------------------------

publish:snapshot:
  stage: publish
  needs: ["test"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - when: never
  before_script:
    # Optional: sign snapshots for consistency
    - |
      if [ -n "$GPG_PRIVATE_KEY_ARMOR" ]; then
        echo "$GPG_PRIVATE_KEY_ARMOR" | base64 -d > /tmp/private.key
        gpg --batch --import /tmp/private.key || true
        mkdir -p ~/.gnupg
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        export GPG_TTY=$(tty) || true
      fi
    # Central credentials
    - |
      cat > /tmp/settings.xml <<EOF
      <settings xmlns="https://maven.apache.org/SETTINGS/1.2.0">
        <servers>
          <server>
            <id>central</id>
            <username>${CENTRAL_USERNAME}</username>
            <password>${CENTRAL_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
  script:
    # With a -SNAPSHOT version in pom.xml, the Central Publishing plugin
    # deploys to Central's snapshot repository automatically.
    - |
      mvn -q help:evaluate -Dexpression=project.version -DforceStdout
      mvn -B -q -s /tmp/settings.xml -Dgpg.passphrase="$GPG_PASSPHRASE" -DskipTests deploy
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - target/*


# -----------------------------
# Maven Site (optional)
# -----------------------------

site:build:
  stage: site
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - when: never
  script:
    - mvn -B -q -DskipTests site site:stage
  artifacts:
    paths:
      - ${SITE_DIR}
    expire_in: 1 week

site:deploy:gh-pages:
  stage: site
  needs: ["site:build"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - when: never
  before_script:
    - |
      apt-get update && apt-get install -y git rsync
      git config --global user.email "${GITHUB_EMAIL:-ci@users.noreply.github.com}"
      git config --global user.name  "${GITHUB_NAME:-gitlab-ci}"
      mkdir gh-pages && cd gh-pages
      git init
      git remote add origin "https://x-access-token:${GITHUB_PAT}@github.com/${GITHUB_REPO}.git"
      git fetch origin gh-pages || true
      git checkout -B gh-pages
  script:
    - |
      rsync -a --delete --exclude ".git" "${CI_PROJECT_DIR}/${SITE_DIR}/" .
      touch .nojekyll
      git add -A
      git commit -m "Publish Maven site: ${CI_COMMIT_SHORT_SHA}" || echo "No changes"
      git push -f origin gh-pages