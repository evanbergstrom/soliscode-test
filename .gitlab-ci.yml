# .gitlab-ci.yml
stages:
  - build
  - test
  - release
  - publish
  - site

default:
  image: maven:3.9.9-eclipse-temurin-23
  cache:
    key: maven-repo
    paths:
      - .m2/repository
  before_script:
    - java -version
    - mvn -v

# ---------- Build (no tests) ----------
build:
  stage: build
  script:
    - mvn -B -q -DskipTests package

# ---------- Test (upload reports on failure) ----------
# ---------- Test (upload reports on failure) ----------
test:
  stage: test
  script:
    # Add -e/-X here if you need more detail; keep --batch-mode for CI
    - mvn -B -e -DtrimStackTrace=false verify
  artifacts:
    when: always
    paths:
      - target/surefire-reports/
      - target/jacoco*.exec
    expire_in: 1 week

# ---------- Semantic-release (manual) ----------
# Calculates next version from commits, updates pom.xml + CHANGELOG.md, creates tag + GitLab Release
release:
  stage: release
  image: node:20
  needs: ["test"]
  variables:
    GIT_DEPTH: "0"   # semantic-release needs full history + tags
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
    - when: never
  before_script:
    - npm -v
    - npm i -g semantic-release @semantic-release/{gitlab,git,exec,changelog,commit-analyzer,release-notes-generator}
  script:
    - semantic-release

# Helper: compute Maven version once (after release job has updated pom.xml)
.version:
  image: maven:3.9.9-eclipse-temurin-23
  stage: publish
  needs: ["release"]
  script:
    - MVN_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:3.5.0:exec)
    - echo "PROJECT_VERSION=$MVN_VERSION" >> version.env
    - echo "Computed project version: $MVN_VERSION"
  artifacts:
    reports: { dotenv: version.env }
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - when: never

# --- Publish RELEASES (non-SNAPSHOT) to Maven Central via Central Publisher
publish:release:
  stage: publish
  image: maven:3.9.9-eclipse-temurin-23
  needs: ["release", ".version"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $PROJECT_VERSION !~ /-SNAPSHOT$/'
      when: manual
      allow_failure: false
    - when: never
  before_script:
    # Import signing key
    - echo "$GPG_PRIVATE_KEY_ARMOR" | base64 -d > /tmp/private.key
    - gpg --batch --import /tmp/private.key && rm -f /tmp/private.key
    - mkdir -p ~/.gnupg
    - echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
    - echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
    - export GPG_TTY=$(tty) || true
    # Write settings.xml for Sonatype Central
    - |
      cat > /tmp/settings.xml <<EOF
      <settings xmlns="http://maven.apache.org/SETTINGS/1.2.0">
        <servers>
          <server>
            <id>central</id>
            <username>${CENTRAL_USERNAME}</username>
            <password>${CENTRAL_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
  script:
    # Deploy to Central (central-publishing-maven-plugin must be in your pom)
    - mvn -B -q -s /tmp/settings.xml -Dgpg.passphrase="$GPG_PASSPHRASE" deploy
  artifacts:
    when: always
    paths: [ target/*.jar, target/*.pom, target/*.asc ]
    expire_in: 1 week

# --- Publish SNAPSHOTS to OSSRH Snapshots
publish:snapshot:
  stage: publish
  image: maven:3.9.9-eclipse-temurin-23
  needs: ["release", ".version"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $PROJECT_VERSION =~ /-SNAPSHOT$/'
      when: on_success
    - when: never
  before_script:
    # (Signing is optional for snapshots; keep it if you want consistent signing)
    - echo "$GPG_PRIVATE_KEY_ARMOR" | base64 -d > /tmp/private.key
    - gpg --batch --import /tmp/private.key && rm -f /tmp/private.key
    - mkdir -p ~/.gnupg
    - echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
    - echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
    - export GPG_TTY=$(tty) || true
    # Write settings.xml for OSSRH snapshots credentials
    - |
      cat > /tmp/settings.xml <<EOF
      <settings xmlns="http://maven.apache.org/SETTINGS/1.2.0">
        <servers>
          <server>
            <id>ossrh-snapshots</id>
            <username>${OSSRH_USERNAME}</username>
            <password>${OSSRH_PASSWORD}</password>
          </server>
        </servers>
      </settings>
      EOF
  script:
    # Standard Maven snapshot deploy (requires <snapshotRepository> in pom)
    - mvn -B -q -s /tmp/settings.xml -Dgpg.passphrase="$GPG_PASSPHRASE" -DskipTests deploy
  artifacts:
    when: always
    paths: [ target/*.jar, target/*.pom, target/*.asc ]
    expire_in: 1 week

generate_site:
  stage: site
  image: maven:3.9-eclipse-temurin-23
  needs: ["build"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    # Builds site for single or multi-module projects and stages it under target/staging
    - mvn -B -ntp site site:stage
  artifacts:
    paths:
      - $SITE_DIR
    expire_in: 1 week

deploy_github_pages:
  stage: site
  image: alpine:3.20
  needs: [ "generate_site" ]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - apk add --no-cache git rsync
    - git config --global user.email "${GITHUB_EMAIL:-ci@users.noreply.github.com}"
    - git config --global user.name  "${GITHUB_NAME:-gitlab-ci}"
    - mkdir gh-pages && cd gh-pages
    - git init
    - git remote add origin "https://x-access-token:${GITHUB_PAT}@github.com/${GITHUB_REPO}.git"
    - git fetch origin gh-pages || true
    - git checkout -B gh-pages
  script:
    - rsync -a --delete "${CI_PROJECT_DIR}/${SITE_DIR}/" .
    - touch .nojekyll   # prevents GitHub Pages/Jekyll from interfering with Maven site output
    - git add -A
    - >
      git commit -m "Publish Maven site: ${CI_COMMIT_SHORT_SHA}" || echo "No changes"
    - git push -f origin gh-pages
  artifacts:
    when: on_failure
    paths: [ gh-pages ]
    expire_in: 1 week